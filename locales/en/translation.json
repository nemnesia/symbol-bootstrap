{
  "app": {
    "description": "Symbol tool that allows you creating, configuring and running Symbol's networks"
  },
  "commands": {
    "clean.description": "It removes the target folder deleting the generated configuration and data.",
    "compose.description": "It generates the `compose.yml` file from the configured network.",
    "config.description": "Command used to set up the configuration files and the nemesis block for the current network.",
    "decrypt.description": "It decrypts a yml file using the provided password.\\nThe source file can be a custom preset file, a preset.yml file or an addresses.yml.\\nThe main use case of this command is to verify private keys in encrypted files after encrypting a custom preset or running a bootstrap command with a provided --password.",
    "encrypt.description": "It encrypts a yml file using the provided password.\\nThe source files would be a custom preset file, a preset.yml file or an addresses.yml.\\nThe main use case of this command is encrypting custom presets files.\\nIf your custom preset contains private keys, it's highly recommended to encrypt it and use provide --password when starting or configuring the node with Bootstrap.",
    "healthCheck.description": "It checks if the services created with docker compose are up and running.\\n\\nThis command checks:\\n- Whether the docker containers are running.\\n- Whether the services' exposed ports are listening.\\n- Whether the rest gateways' /node/health are OK.\\n\\nThe health check process handles 'repeat' and custom 'openPort' services.",
    "link.description": "It announces VRF and Voting Link transactions to the network for each node with 'Peer' or 'Voting' roles.\\nThis command finalizes the node registration to an existing network.",
    "modifyMultisig.description": "Create or modify a multisig account.",
    "pack.description": "It configures and packages your node into a zip file that can be uploaded to the final node machine.",
    "renewCertificates.description": "It renews the SSL certificates of the node regenerating the node.csr.pem files but reusing the current private keys.\\nThe certificates are only regenerated when they are closed to expiration (30 days). If you want to renew anyway, use the --force param.\\nThis command does not change the node private key (yet). This change would require a harvesters.dat migration and relinking the node key.\\nIt's recommended to backup the target folder before running this operation!",
    "report.description": "it generates reStructuredText (.rst) reports describing the configuration of each node.",
    "resetData.description": "It removes the data keeping the generated configuration, certificates, keys and block 1.",
    "run.description": "It boots the network via docker using the generated `compose.yml` file and configuration.\\nThe config and compose methods/commands need to be called before this method.\\nThis is just a wrapper for the `docker compose up` bash call.",
    "start.description": "Single command that aggregates config, compose and run in one line!",
    "stop.description": "It stops the docker compose network if running (symbol-bootstrap started with --detached).\\nThis is just a wrapper for the `docker compose down` bash call.",
    "updateVotingKeys.description": "It updates the voting files containing the voting keys when required.\\nIf the node's current voting file has an end epoch close to the current network epoch, this command will create a new 'private_key_treeX.dat' that continues the current file.\\nBy default, bootstrap creates a new voting file once the current file reaches its last month. The current network epoch is resolved from the network or you can provide it with the `finalizationEpoch` param.\\nWhen a new voting file is created, Bootstrap will advise running the `link` command again",
    "verify.description": "It tests the installed software in the current computer reporting if there is any missing dependency, invalid version, or software related issue.",
    "wizard.description": "An utility command that will help you configuring node!"
  },
  "flags": {
    "help.description": "It shows the help of this command.",
    "target.description": "The target folder where the symbol-bootstrap network is generated.",
    "password.description": "A password used to encrypt and decrypt private keys in preset files like addresses.yml and preset.yml. Bootstrap prompts for a password by default, can be provided in the command line (--password=XXXX) or disabled in the command line (--noPassword).",
    "noPassword.description": "When provided, Bootstrap will not use a password, so private keys will be stored in plain text. Use with caution.",
    "offline.description": "If --offline is used, Bootstrap resolves the configuration without querying the running network.",
    "logger.description": "The loggers the command will use. Options are: Console,File,Silent. Use ',' to select multiple loggers.",
    "compose.upgrade.description": "It regenerates the docker compose and utility files from the <target>/docker folder",
    "compose.user.description": "User used to run the services in the compose.yml file. \"{{currentUser}}\" means the current user.",
    "config.preset.description": "The network preset. It can be provided via custom preset or cli parameter. If not provided, the value is resolved from the target/preset.yml file. Options are: {{preset}}, my-custom-network.yml (advanced, only for custom networks).",
    "config.assembly.description": "The assembly that defines the node(s) layout. It can be provided via custom preset or cli parameter. If not provided, the value is resolved from the target/preset.yml file. Options are: {{assembly}}, my-custom-assembly.yml (advanced).",
    "config.customPreset.description": "External preset file. Values in this file will override the provided presets.",
    "config.reset.description": "It resets the configuration generating a new one.",
    "config.upgrade.description": "It regenerates the configuration reusing the previous keys. Use this flag when upgrading the version of bootstrap to keep your node up to date without dropping the local data. Backup the target folder before upgrading.",
    "config.report.description": "It generates reStructuredText (.rst) reports describing the configuration of each node.",
    "config.user.description": "User used to run docker images when creating configuration files like certificates or nemesis block. \"{{currentUser}}\" means the current user.",
    "decrypt.source.description": "The source encrypted yml file to be decrypted.",
    "decrypt.destination.description": "The destination decrypted file to create. The destination file must not exist.",
    "decrypt.password.description": "The password to use to decrypt the source file into the destination file. Bootstrap prompts for a password by default, can be provided in the command line (--password=XXXX) or disabled in the command line (--noPassword).",
    "encrypt.source.description": "The source plain yml file to be encrypted. If this file is encrypted, the command will raise an error.",
    "encrypt.destination.description": "The destination encrypted file to create. The destination file must not exist.",
    "encrypt.password.description": "The password to use to encrypt the source file into the destination file. Bootstrap prompts for a password by default, can be provided in the command line (--password=XXXX) or disabled in the command line (--noPassword).",
    "link.unlink.description": "Perform \"Unlink\" transactions unlinking the voting and VRF keys from the node signer account.",
    "announce.url.description": "the network url",
    "announce.useKnownRestGateways.description": "Use the best NEM node available when announcing. Otherwise the command will use the node provided by the --url parameter.",
    "announce.ready.description": "If --ready is provided, the command will not ask for confirmation when announcing transactions.",
    "announce.maxFee.description": "the max fee used when announcing (absolute). The node min multiplier will be used if it is not provided.",
    "announce.customPreset.description": "This command uses the encrypted addresses.yml to resolve the main private key. If the main private is only stored in the custom preset, you can provide it using this param. Otherwise, the command may ask for it when required.",
    "announce.serviceProviderPublicKey.description": "Public key of the service provider account, used when the transaction announcer(service provider account) is different than the main account private key holder.",
    "modifyMultisig.minRemovalDelta.description": "Delta of signatures needed to remove a cosignatory. 0 means no change, a positive(+) number means increment and a negative(-) number means decrement to the actual value.",
    "modifyMultisig.minApprovalDelta.description": "Delta of signatures needed to approve a transaction. 0 means no change, a positive(+) number means increment and a negative(-) number means decrement to the actual value.",
    "modifyMultisig.addressAdditions.description": "Cosignatory accounts addresses to be added (separated by a comma).",
    "modifyMultisig.addressDeletions.description": "Cosignatory accounts addresses to be removed (separated by a comma).",
    "pack.ready.description": "If --ready is provided, the command will not ask offline confirmation.",
    "renewCertificates.customPreset.description": "This command uses the encrypted addresses.yml to resolve the main and transport private key. If the main and transport privates are only stored in the custom preset, you can provide them using this param. Otherwise, the command may ask for them when required.",
    "renewCertificates.user.description": "User used to run docker images when generating the certificates. \"{{currentUser}}\" means the current user.",
    "renewCertificates.force.description": "Renew the certificates even though they are not close to expire.",
    "run.detached.description": "If provided, docker compose will run with -d (--detached) and this command will wait until server is running before returning",
    "run.healthCheck.description": "Checks if the services created with docker compose are up and running.",
    "run.resetData.description": "It resets the database and node data but keeps the generated configuration, keys, voting tree files and block 1.",
    "run.pullImages.description": "It pulls the images from DockerHub when running the configuration. It only affects alpha/dev docker images.",
    "run.args.description": "Add extra arguments to the docker compose up command. Check out https://docs.docker.com/compose/reference/up.",
    "run.build.description": "If provided, docker compose will run with -b (--build)",
    "run.timeout.description": "If running in detached mode, how long before timing out (in milliseconds)",
    "updateVotingKeys.user.description": "User used to run docker images when creating the the voting key files. \"{{currentUser}}\" means the current user.",
    "updateVotingKeys.finalizationEpoch.description": "The network's finalization epoch. It can be retrieved from the /chain/info rest endpoint. If not provided, the bootstrap known epoch is used.",
    "wizard.customPreset.description": "The custom preset to be created.",
    "wizard.network.description": "The node or network you want to create.",
    "wizard.ready.description": "If --ready is provided, the command will not ask offline confirmation."
  },
  "messages": {
    "decrypt.error.sourceNotExist": "Source file {{file}} does not exist!",
    "decrypt.error.destinationExists": "Destination file {{file}} already exists!",
    "decrypt.prompt.password": "Enter the password to use to decrypt the source file into the destination file. Keep this password in a secure place!",
    "decrypt.info.decrypted": "Decrypted file {{file}} has been created! Any private keys on this file are now in plain text. Remember to remove the file!",
    "encrypt.error.sourceNotExist": "Source file {{file}} does not exist!",
    "encrypt.error.destinationExists": "Destination file {{file}} already exists!",
    "encrypt.prompt.password": "Enter the password used to encrypt the source file into the destination file. Keep this password in a secure place!",
    "encrypt.info.encryptExists": "Source file {{file}} is already encrypted. If you want to decrypt it use the decrypt command.",
    "encrypt.info.encrypted": "Encrypted file {{file}} has been created!",
    "pack.error.targetZipExists": "The target zip file {{file}} already exists. Do you want to delete it before repackaging your target folder?",
    "pack.warning.offlineRecommended": "Symbol Bootstrap is about to start working with sensitive information (certificates and voting file generation) so it is highly recommended that you disconnect from the network before continuing. Say YES if you are offline or if you don't care.",
    "pack.info.comeBackOffline": "Come back when you are offline...",
    "pack.info.zipCreated": "Zip file {{file}} has been created. You can unzip it in your node's machine and run:",
    "renewCertificates.error.nodeNotFound": "There is not node in addresses at index {{index}}",
    "renewCertificates.info.created": "Bootstrap has created new SSL certificates. Review the logs!",
    "renewCertificates.info.upToDate": "The SSL certificates are up-to-date. There is nothing to upgrade.",
    "updateVotingKeys.error.presetCannotBeLoaded": "Node's preset cannot be loaded. Have you provided the right --target? If you have, please rerun the 'config' command with --upgrade. Error: {{error}}",
    "updateVotingKeys.error.nodeNotFound": "There is not node in addresses at index {{index}}",
    "updateVotingKeys.info.created": "Bootstrap has created new voting file(s). Review the logs!",
    "updateVotingKeys.info.upToDate": "Voting files are up-to-date. There is nothing to upgrade"
  }
}
